Variable Length arrays:
Note: Variable Length arrays are not available in proper C++, however using extenstions, we can use VLA in C++ , even though it is not reccomended.
If you want to use VLA, either use new keyword to allocate space (make sure to delete it once you are done with it) or use standard container <vector>


In C++, variable length arrays are not legal. G++ allows this as an "extension" (because C allows it), so in G++ (without being -pedantic about following the C++ standard), you can do:

int n = 10;
double a[n]; // Legal in g++ (with extensions), illegal in proper C++
If you want a "variable length array" (better called a "dynamically sized array" in C++, since proper variable length arrays aren't allowed), you either have to dynamically allocate memory yourself:

int n = 10;
double* a = new double[n]; // Don't forget to delete [] a; when you're done!
Or, better yet, use a standard container:

int n = 10;
std::vector<double> a(n); // Don't forget to #include <vector>
If you still want a proper array, you can use a constant, not a variable, when creating it:

const int n = 10;
double a[n]; // now valid, since n isn't a variable (it's a compile time constant)
Similarly, if you want to get the size from a function in C++11, you can use a constexpr:

constexpr int n()
{
    return 10;
}

double a[n()]; // n() is a compile time constant expression



Using the delete operator on an array pointer is undefined behavior in C++. 
This means that the behavior of the program is unpredictable and can vary between different compilers and platforms.
In most cases, using delete on an array pointer will result in a memory leak. This is because the delete operator only deallocates the memory for the single object pointed to by the pointer, not the entire array.
In some cases, using delete on an array pointer may cause the program to crash. This is because the delete operator may try to access memory that is not valid, which can lead to a segmentation fault.
It is important to always use the delete[] operator to deallocate memory for an array of objects in C++. This will ensure that the entire array is properly deallocated and that no memory leaks occur.
