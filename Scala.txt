



Scala Options class

A powerful Scala idiom is to use the Option class when returning a value from a function that can be null

Simply stated, instead of returning one object when a function succeeds and null when it fails, your function should instead return an instance of an Option, where the Option object is either:

	An instance of the Scala Some class
	An instance of the Scala None class

ex:
def toInt(in: String): Option[Int] = {
    try {
        Some(Integer.parseInt(in.trim))
    } catch {
        case e: NumberFormatException => None
    }
}

If you're a consumer of this toInt function, your code will look something like this:

toInt(someString) match {
    case Some(i) => println(i)
    case None => println("That didn't work.")
}


Scala map function 
The map method takes a predicate function and applies it to every element in the collection. It creates a new collection with the result of the predicate function applied to each and every element of the collection.

def map[B](f: (A) â‡’ B): Traversable[B]